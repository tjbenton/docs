/// Creates a list of global breakpoints
$media-breakpoints = {
  'sm': 568px,
  'md': 768px,
  'lg': 1024px,
  'xl': 1400px
}

$media-breakpoints-list = split(',', ',>=' + join(',>=', keys($media-breakpoints)))

/// Creates a list of static expressions or media types
$media-expressions ?= {
  'screen': 'screen',
  'print': 'print',
  'handheld': 'handheld',
  'retina2x': '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
  'retina3x': '(-webkit-min-device-pixel-ratio: 3) and (min-resolution: 350dpi)'
}

/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
$unit-intervals ?= { 'px': 1, 'em': 0.01, 'rem': 0.1 }
media($breakpoint) {
  require-string($breakpoint)
  $parsed-query = parse-query($breakpoint)

  if !$parsed-query.value {
    $media = $m = ''
    {block}
  } else {
    // @media ({$parsed-query.type} : $parsed-query.size) {
    @media $parsed-query.expression {
      // set the current media state
      if $parsed-query.value in keys($media-breakpoints) {
        $media = $m = '\@' + $parsed-query.value
      }

      {block}
    }
  }
}

parse-query($expression) {
  $result = { 'expression': '', 'type': '', 'size': '', 'operator': '', 'dimension': '', 'value': '' }

  if !$expression {
    return $result
  }

  if $expression in keys($media-expressions) {
    $result.expression = unquote($media-expressions[$expression])
    $result.value = $expression
  } else {
    $is-value = true
    $parsed-query = slice(match('^(height|width)?([<>=]{1,})(.*)', $expression), 1)
    $type = $parsed-query[0] || 'width'
    $size = ''
    $result.operator = $parsed-query[1]
    $result.value = $parsed-query[2]

    if $result.value in keys($media-breakpoints) {
      $size = $media-breakpoints[$result.value];
    } else {
      $size = convert($result.value)
    }

    $unit = $unit-intervals[unit($size)]

    if $result.operator == '>' {
      $size += $unit
      $type = 'min-' + $type
    } else if $result.operator == '<' {
      $size -= $unit
      $type = 'max-' + $type
    } else if $result.operator == '>=' {
      $type = 'min-' + $type
    } else if $result.operator == '<=' {
      $type = 'max-' + $type
    } else {
      warn($expression + ' is missing an operator.');
    }

    $result.expression = '(' + $type + ': ' + $size + ')'
    $result.size = $size
    $result.type = $type
  }

  return $result
}
