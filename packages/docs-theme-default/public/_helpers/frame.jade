mixin frame(obj, token, block)
  - block = prefix + '-c-frame' + (!!block ? '--' + block : '')
  - var frame = prefix + '-js-frame'
  - obj = obj.toString().slice(8, -1) !== 'Object' ? { raw: obj, escaped: obj } : obj
  - var lang = obj.language || obj.lang || 'json'
  - var blockinfo = (token || {}).blockinfo || {}
  - var file_path = (blockinfo.file || {}).path
  - var description = obj.description
  - obj.settings = obj.settings || {}
  - obj.settings.class = obj.settings.class ? obj.settings.class.replace(/\s*\./g, ' ') : ''
  - var code = blockinfo.code || {}
  - var id = 'markup-' + encode(obj)
  
  section(id="#{id}")
    if description
      != description
    div(class="#{block} #{frame}")&attributes(obj.settings)
      div(class="#{block}__header")
        div(class="#{block}__url")
          span(class='#{block}__project-name')= pkg.name
          if !!file_path
            span(class="#{block}__path") /#{file_path}
        div(class="#{block}__actions #{frame}__actions #{prefix}-o-spacing--off")
          a(class="#{block}__action--copy #{frame}__copy") Copy
          a(class="#{block}__action--link #{frame}__link", href="##{id}") Link To

        span(class="#{block}__language")= lang
      div(class='#{block}__body')
        each type in [ 'raw', 'raw_stateless', 'escaped', 'escaped_stateless' ]
          - var should_escape = type.indexOf('escaped') > -1
          - var data = obj[type.replace('escaped', 'raw')] || obj[type]
          if data
            div(
              class="#{block}__section--#{type.replace('_', '-')} #{frame}__section", 
              data-type="#{type.replace('_', '-')}"
            )
              if should_escape
                - data = highlight(data, lang)
                - var len = data.split('\n').length
                - var line_numbers = []
                - var start = code.start || 1
                - var end = code.end || len || 0
                - for (var i = 0; i < len; i++) line_numbers.push('<span class="hljs-lineno"></span>')
                - data = data.replace(/^\s*/gm, function(match) {
                -   var result = '<span class="hljs-leading-whitespaces">'
                -   result += match.replace(/\s/g, '<span class="hljs-leading-whitespace"> </span>')
                -   result += '</span>'
                -   return result
                - })
                pre(class="#{block}__pre #{syntax_highlight} hljs #{lang}", data-type="#{syntax_highlight}")
                  code(class="#{block}__code")
                    != data
                  span(
                    class="hljs-linenos",
                    data-start="#{start}",
                    data-end="#{end}",
                    style="counter-reset: line #{start > 0 ? start - 1 : start}"
                  )!= line_numbers.join('\n')
              else
                != data
